{"version":3,"file":"static/js/243.d0683c9a.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.js","components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","pages/MovieDetails/AdditionalInformation/AdditionalInformation.styled.js","pages/MovieDetails/AdditionalInformation/AdditionalInformation.jsx","pages/MovieDetails/MovieDetails.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const BackLink = styled(Link)`\n  font-size: 18px;\n  font-weight: 500;\n  display: flex;\n  list-style: none;\n  transform: scale(1);\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\nexport const Section = styled.div`\n  margin: 0 auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const MovieItem = styled.div`\n  border-radius: 5px;\n  object-fit: cover;\n  width: 100%;\n  display: grid;\n  margin: 0 auto;\n  justify-items: center;\n  justify-content: center;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 30px 15px;\n`;\n\nexport const MoviePoster = styled.img`\n  border-radius: 5px;\n  object-fit: cover;\n  display: block;\n  max-width: 100%;\n  height: auto;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieTitle = styled.h3`\n  font-size: 26px;\n  font-weight: 700;\n`;\n\nexport const MovieInfoDetails = styled.div`\n  h2{\n    color: blue;\n    margin-bottom: 10px;\n  }\n  h3{\n    padding-bottom: 10px ;\n  }\n  p{\n    margin-bottom: 20px;\n  }\n}\n`;\n","import PropTypes from 'prop-types';\nimport { getPosterFilm, getGenres } from 'services/Api';\nimport {MovieItem, MoviePoster,MovieTitle,MovieInfoDetails} from './MoviesListItem.styled'\n\nconst MoviesListItem = ({ movie }) => {\n    const { poster_path, title, overview, genres, release_date, vote_average, name} = movie;\n    return (\n        <MovieItem >\n            <MoviePoster src={getPosterFilm(poster_path)} alt={title} />\n\n        <MovieInfoDetails>\n                      <MovieTitle>\n                {title ?? name}\n            </MovieTitle>\n          <h2> ({release_date})</h2>\n          <p>User Score: {vote_average}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{getGenres(genres)}</p>\n\n            </MovieInfoDetails> \n        </MovieItem>\n        \n    )\n}\nMoviesListItem.propTypes = {\n    movie: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n        overview: PropTypes.string,\n        genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ),\n    vote_average: PropTypes.number,\n  }),\n}\nexport default MoviesListItem;","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const AddInfo = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 80px;\n  margin-top: 50px;\n  font-size: 22px;\n  font-weight: 700;\n  padding: 10px 20px;\n`;\n\nexport const AddTitleReviews = styled(NavLink)`\n  cursor: pointer;\n`;\nexport const AddTitleCast = styled(NavLink)`\n  cursor: pointer;\n`;\n","import {AddInfo, AddTitleReviews, AddTitleCast} from './AdditionalInformation.styled'\n\n\nconst AdditionalInformation = ({ backLinkHref }) => {\n    return (\n        <AddInfo>\n        <AddTitleReviews to=\"reviews\" state={{ from: backLinkHref }}>\n            Reviews</AddTitleReviews> \n                <AddTitleCast to=\"cast\" state={{ from: backLinkHref }}>\n                Cast</AddTitleCast> \n        </AddInfo>)\n\n};\nexport default AdditionalInformation","import Notiflix from 'notiflix';\nimport Loader from 'components/Loader/Loader';\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getDetails } from '../../services/Api';\nimport { BackLink, Section } from './MovieDetails.styled';\nimport { GoArrowLeft } from 'react-icons/go';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport MoviesListItem from 'components/MoviesListItem/MoviesListItem';\nimport AdditionalInformation from './AdditionalInformation/AdditionalInformation';\n\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState({});\n    const [isLoading, setIsLoading] = useState(false)\n    const location = useLocation()\n    const backLinkHref = location.state?.from ?? '/';\n \n    useEffect(() => {\n        setIsLoading(true)\n        const getMovieInfo = async () => {\n            try {\n                const response = await getDetails(movieId);\n                setMovie(response);\n                setIsLoading(false)\n            } catch (error) {\n                Notiflix.Notify.failure('Sorry, nothing was found')\n            }\n        }\ngetMovieInfo()\n    }, [movieId])\n\n    if (!movie) {\n        return;\n    }\n\n    return (\n        <main>\n            <Section>\n            <BackLink to={backLinkHref}>\n                <GoArrowLeft size={24} />\n                    Go back</BackLink>\n                {isLoading && <Loader />}\n                {movie && <MoviesListItem movie={movie} />}\n                <AdditionalInformation backLinkHref={backLinkHref} />\n                <Suspense fallback={<Loader />}>\n                <Outlet />\n                </Suspense>\n            </Section>\n        </main>\n    )\n}\n\nexport default MovieDetails;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07f8816ebdb8fd109b409236cc379840';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `https://image.tmdb.org/t/p/w300/${posterPath}`;\n  return 'https://th.bing.com/th/id/R.d455faed57de093e87bf5e8d443a939d?rik=mcfV46ZrM7B%2b1w&riu=http%3a%2f%2fthemaryastorcollection.com%2fwp-content%2fgallery-bank%2falbum-thumbs%2fo_1a7dsr5bf1hr34nf1csc1eeb124va.jpg&ehk=zJ6vOJ%2fVm98M8P8VHvK9MVr5JhMaIybLNhey7wmTd2c%3d&risl=&pid=ImgRaw&r=0';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n"],"names":["BackLink","styled","Link","Section","MovieItem","MoviePoster","MovieTitle","MovieInfoDetails","movie","poster_path","title","overview","genres","release_date","vote_average","name","src","getPosterFilm","alt","getGenres","AddInfo","AddTitleReviews","NavLink","AddTitleCast","backLinkHref","to","state","from","movieId","useParams","useState","setMovie","isLoading","setIsLoading","useLocation","useEffect","getMovieInfo","getDetails","response","Notiflix","size","Loader","Suspense","fallback","axios","API_KEY","searchMovies","query","page","data","results","getTrending","getCredits","cast","getReviews","posterPath","map","genre","join"],"sourceRoot":""}