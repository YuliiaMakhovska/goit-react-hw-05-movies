{"version":3,"file":"static/js/621.16ee7fce.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesAllList = styled.ul`\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 30px;\n  display: grid;\n  justify-items: center;\n  justify-content: center;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 30px 20px;\n  grid-auto-rows: auto;\n  max-width: 1200px;\n`;\n\nexport const MovieCard = styled.li`\n  border-radius: 5px;\n  object-fit: cover;\n  width: 100%;\n  &:hover {\n    transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n    transform: scale(1.01);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: block;\n  list-style: none;\n  transform: scale(1);\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const MoviePoster = styled.img`\n  border-radius: 5px;\n  object-fit: cover;\n  display: block;\n  max-width: 100%;\n  height: auto;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  padding-top: 15px;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from \"react-router-dom\";\nimport { getPosterFilm } from \"services/Api\";\nimport { MoviesAllList, MovieCard, MovieLink, MoviePoster, MovieWrapper } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    if (!movies) {\n        return;\n    }\n    return (\n        <MoviesAllList>\n        {movies.map(({ id, name, poster_path, title }) => (\n            <MovieCard key={id}>\n                <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                    <MoviePoster src={getPosterFilm(poster_path)}\n                        alt={title} />\n                    <MovieWrapper>{title ?? name }</MovieWrapper>\n                </MovieLink>\n            </MovieCard>\n        ) )}\n    </MoviesAllList>\n\n    )\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string,\n        poster_path: PropTypes.string,\n        title: PropTypes.string,\n    })\n  ),\n};","import styled from '@emotion/styled';\n\nexport const ReviewsContainer = styled.div`\n  display: flex;\n  max-width: 1400px;\n  margin: 0 auto;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const Item = styled.li`\n  h2 {\n    margin-bottom: 10px;\n  }\n  p {\n    margin-bottom: 20px;\n  }\n`;\n","import Loader from \"components/Loader/Loader\";\nimport Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\nimport { useParams } from \"react-router-dom\";\nimport { getReviews } from \"services/Api\";\nimport { useState, useEffect } from \"react\";\nimport { List, Item, ReviewsContainer } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        setIsLoading(true)\n        const getMoviesReviews = async () => {\n            try {\n                const response = await getReviews(movieId);\n                setReviews(response)\n                setIsLoading(false)\n                \n            } catch (error) {\n                Notiflix.Notify.failure('Sorry, nothing was found')\n            }\n        }\n        getMoviesReviews()\n    }, [movieId])\n\n    if (!reviews) {\n        return;\n    }\n    return (\n        <>\n            <ReviewsContainer>\n            {isLoading && reviews.length > 0 && (\n                <List>\n                    {reviews.map(({ id, content, author }) => (\n              <Item key={id}>\n              <h2>{author}</h2>\n              <p>{content}</p>\n            </Item>\n                    ) )}\n            </List>\n            )}\n                {isLoading && <Loader />}\n                </ReviewsContainer>\n        </>\n    )\n}\n\nReviews.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            content: PropTypes.string.isRequired,\n            author: PropTypes.string.isRequired\n})\n    )\n}\nexport default Reviews;","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n&:placeholder {\n  font: inherit;\n  font-size: 18px;`;\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &: hover {\n    opacity: 1;\n  } ;\n`;\n","import PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { useState } from \"react\";\nimport { Form, Input, Button } from './SearchBar.styled';\nimport {BsSearch} from 'react-icons/bs'\n\nconst SearchBar = ({ value, onChange }) => {\n    const [query, setQuery] = useState(value ? value : '')\n    const handleChange = e => {\n        setQuery(e.currentTarget.value)\n    }\n    const onFormSubmit = e => {\n        e.preventDefault();\n        const newQuery = e.target.elements.query.value.toLowerCase();\n        onChange(newQuery.trim())\n\n    if (newQuery.trim() === '') {\n      Notiflix.Notify.failure(\"Please, enter correct name\");\n      return;\n        }\n    }\n\n    return (\n        <Form onSubmit={onFormSubmit}>\n    <Input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={handleChange}\n          autoFocus={true}\n    />\n    <Button type=\"submit\">\n      <BsSearch size={30} />\n    </Button>\n  </Form>\n    )\n}\n\nSearchBar.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n}\nexport default SearchBar;","import Notiflix from 'notiflix';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport Loader from 'components/Loader/Loader';\nimport Reviews from 'components/Reviews/Reviews';\nimport { searchMovies } from \"services/Api\";\nimport { useState, useEffect } from \"react\";\nimport { Outlet, useSearchParams } from \"react-router-dom\";\n\n\n\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const movie = searchParams.get('movie') ?? '';\n\n    const updateQueryString = (movie) => {\n        const searchMovie = movie !== \"\" ? { movie } : {};\n        setSearchParams(searchMovie);\n    }\n\n   useEffect(() => {\n       if (!movie) {\n           return;\n        }\n        setIsLoading(true)\n       const getMovie = async () => {\n           try {\n               const searchedMovie = await searchMovies(movie);\n               setMovies(searchedMovie);\n               setIsLoading(false);\n           } catch (error) {\n               Notiflix.Notify.failure(\"Something wrong\")\n    \n            }\n       }\n          getMovie() \n    }, [movie])\n\n\n \n    return (\n        <main>\n            <section>\n        <SearchBar value={movie} onChange ={updateQueryString} />\n                {movies.length > 0 && !isLoading && <MoviesList movies={movies} />}\n                <Reviews />\n        {isLoading && <Loader />}\n            </section>\n            <Outlet />\n        </main>\n    )\n}\nexport default Movies","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07f8816ebdb8fd109b409236cc379840';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `https://image.tmdb.org/t/p/w300/${posterPath}`;\n  return 'https://th.bing.com/th/id/R.d455faed57de093e87bf5e8d443a939d?rik=mcfV46ZrM7B%2b1w&riu=http%3a%2f%2fthemaryastorcollection.com%2fwp-content%2fgallery-bank%2falbum-thumbs%2fo_1a7dsr5bf1hr34nf1csc1eeb124va.jpg&ehk=zJ6vOJ%2fVm98M8P8VHvK9MVr5JhMaIybLNhey7wmTd2c%3d&risl=&pid=ImgRaw&r=0';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n"],"names":["MoviesAllList","styled","MovieCard","MovieLink","Link","MoviePoster","MovieWrapper","movies","location","useLocation","map","id","name","poster_path","title","to","state","from","src","getPosterFilm","alt","ReviewsContainer","List","Item","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getMoviesReviews","getReviews","response","Notiflix","length","content","author","Loader","Form","Input","Button","value","onChange","query","setQuery","onSubmit","e","preventDefault","newQuery","target","elements","toLowerCase","trim","type","currentTarget","autoFocus","size","setMovies","useSearchParams","searchParams","setSearchParams","movie","get","getMovie","searchMovies","searchedMovie","MoviesList","Reviews","axios","API_KEY","page","data","results","getTrending","getDetails","getCredits","cast","posterPath","getGenres","genres","genre","join"],"sourceRoot":""}