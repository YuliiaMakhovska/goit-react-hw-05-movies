{"version":3,"file":"static/js/304.48b0eba1.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesAllList = styled.ul`\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 30px;\n  display: grid;\n  justify-items: center;\n  justify-content: center;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 30px 20px;\n  grid-auto-rows: auto;\n  max-width: 1200px;\n`;\n\nexport const MovieCard = styled.li`\n  border-radius: 5px;\n  object-fit: cover;\n  width: 100%;\n  &:hover {\n    transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n    transform: scale(1.01);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: block;\n  list-style: none;\n  transform: scale(1);\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const MoviePoster = styled.img`\n  border-radius: 5px;\n  object-fit: cover;\n  display: block;\n  max-width: 100%;\n  height: auto;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  padding-top: 15px;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from \"react-router-dom\";\nimport { getPosterFilm } from \"services/Api\";\nimport { MoviesAllList, MovieCard, MovieLink, MoviePoster, MovieWrapper } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    if (!movies) {\n        return;\n    }\n    return (\n        <MoviesAllList>\n        {movies.map(({ id, name, poster_path, title }) => (\n            <MovieCard key={id}>\n                <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                    <MoviePoster src={getPosterFilm(poster_path)}\n                        alt={title} />\n                    <MovieWrapper>{title ?? name }</MovieWrapper>\n                </MovieLink>\n            </MovieCard>\n        ) )}\n    </MoviesAllList>\n\n    )\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string,\n        poster_path: PropTypes.string,\n        title: PropTypes.string,\n    })\n  ),\n};","import styled from '@emotion/styled';\n\nexport const HomeTitle = styled.h2`\n  margin-bottom: 20px;\n  font-size: 36px;\n  font-weight: bold;\n  text-align: center;\n  text-shadow: 2px 2px 5px blue;\n`;\n","import { useState, useEffect } from \"react\";\nimport { getTrending } from \"services/Api\";\nimport { HomeTitle } from './Home.styled';\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport Notiflix from 'notiflix';\nimport Loader from \"components/Loader/Loader\";\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [page, setPage] = useState(1);\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    useEffect(() => {\n        setIsLoading(true)\n        const getTrendMovies = async () => {\n            try {\n                const response = await getTrending(page);\n                setMovies(response);\n                setPage(1)\n                setIsLoading(false)\n            } catch (error) {\n                Notiflix.Notify.failure('Something went wrong, please try again later!')\n            }\n        }\n        getTrendMovies()\n}, [page])\n\n    \n    // useEffect(() => {\n    //     setIsLoading(true)\n    //     getTrending(movies)\n    //         .then(results => setMovies([...results]))\n    //         .catch(error => setError(error.message))\n    //     .finally(() => setIsLoading(false))\n    // }, [])\n    \n    return (\n        <main>\n            <section>\n                {!isLoading && movies.length > 0 && (\n                    <>\n                        <HomeTitle> Trending Movies</HomeTitle>\n                        {movies.length > 0 && !isLoading && <MoviesList movies={movies} />}\n                    </>)}\n            </section>\n            {isLoading && <Loader />}\n        </main>\n    )\n}\nexport default Home;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07f8816ebdb8fd109b409236cc379840';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `https://image.tmdb.org/t/p/w300/${posterPath}`;\n  return 'https://th.bing.com/th/id/R.d455faed57de093e87bf5e8d443a939d?rik=mcfV46ZrM7B%2b1w&riu=http%3a%2f%2fthemaryastorcollection.com%2fwp-content%2fgallery-bank%2falbum-thumbs%2fo_1a7dsr5bf1hr34nf1csc1eeb124va.jpg&ehk=zJ6vOJ%2fVm98M8P8VHvK9MVr5JhMaIybLNhey7wmTd2c%3d&risl=&pid=ImgRaw&r=0';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n"],"names":["MoviesAllList","styled","MovieCard","MovieLink","Link","MoviePoster","MovieWrapper","movies","location","useLocation","map","id","name","poster_path","title","to","state","from","src","getPosterFilm","alt","HomeTitle","useState","setMovies","page","setPage","isLoading","setIsLoading","useEffect","getTrendMovies","getTrending","response","Notiflix","length","MoviesList","Loader","axios","API_KEY","searchMovies","query","data","results","getDetails","movieId","getCredits","cast","getReviews","posterPath","getGenres","genres","genre","join"],"sourceRoot":""}