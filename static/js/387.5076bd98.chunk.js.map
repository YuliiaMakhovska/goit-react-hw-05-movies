{"version":3,"file":"static/js/387.5076bd98.chunk.js","mappings":"uTAEaA,EAAgBC,EAAAA,EAAAA,IAAH,qIAQbC,EAAWD,EAAAA,EAAAA,GAAH,wRAaRE,EAAOF,EAAAA,EAAAA,GAAH,sQAUJG,EAAMH,EAAAA,EAAAA,IAAH,gFAMHI,EAAOJ,EAAAA,EAAAA,EAAH,gH,SCqBjB,EApDa,WACT,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WACND,GAAa,GACb,IAAME,EAAa,mCAAG,8GAESC,EAAAA,EAAAA,IAAWT,GAFpB,OAERU,EAFQ,OAGdN,EAAQM,GACRJ,GAAa,GAJC,gDAMdK,IAAAA,OAAAA,QAAwB,4BANV,yDAAH,qDASnBH,GACH,GAAE,CAACR,IAECG,EAGL,OACI,UAACT,EAAD,WACKW,GAAaF,EAAKS,OAAS,IAAM,SAAChB,EAAD,UAC7BO,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAtB,OACV,UAACnB,EAAD,YACA,SAACC,EAAD,CAAKmB,IACLD,EAAY,0CAC2BA,GACnC,ySAENE,IAAKH,KAEK,SAAChB,EAAD,UAAOgB,MARJD,EADD,MAabT,IAAa,SAACc,EAAA,EAAD,MAGzB,C,mPC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAY,mCAAG,WAAOC,EAAOC,GAAd,uFACHJ,EAAAA,EAAAA,IAAA,gCACIC,EADJ,gCACmCG,EADnC,kBACiDD,EADjD,yBADG,cACpBb,EADoB,yBAInBA,EAASe,KAAKC,SAJK,2CAAH,wDAOZC,EAAW,mCAAG,WAAMH,GAAN,uFACFJ,EAAAA,EAAAA,IAAA,oCACQC,EADR,iBACwBG,IAFtB,cACnBd,EADmB,yBAIlBA,EAASe,KAAKC,SAJI,2CAAH,sDAOXE,EAAU,mCAAG,WAAM5B,GAAN,uFACDoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,oBACQqB,EADR,oBADC,cAClBX,EADkB,yBAIjBA,EAASe,MAJQ,2CAAH,sDAMVhB,EAAU,mCAAG,WAAMT,GAAN,uFACDoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBqB,EADhB,oBADC,cAClBX,EADkB,yBAIjBA,EAASe,KAAKtB,MAJG,2CAAH,sDAMV0B,EAAU,mCAAG,WAAM7B,GAAN,uFACDoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBqB,EADhB,2BADC,cAClBX,EADkB,yBAIjBA,EAASe,KAAKC,SAJG,2CAAH,sDAOhB,SAASI,EAAcC,GAC5B,OAAIA,EAAkB,mCAAN,OAA0CA,GACnD,0RACR,CAEM,SAASC,EAAUC,GACxB,GAAKA,EAIL,OADmBA,EAAOpB,KAAI,SAAAqB,GAAK,OAAIA,EAAMC,IAAV,IACjBC,KAAK,KACxB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.div`\n  display: flex;\n  max-width: 1400px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 30px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10 px;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n`;\n\nexport const Name = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n","import Loader from \"components/Loader/Loader\";\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { useParams } from \"react-router-dom\";\nimport { getCredits } from \"services/Api\";\nimport { useState, useEffect } from 'react';\nimport { CastContainer, CastList, Item, Img, Name } from \"./Cast.styled\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        setIsLoading(true)\n        const getMoviesCast = async () => {\n            try {\n                const response = await getCredits(movieId)\n                setCast(response)\n                setIsLoading(false)\n            } catch (error) {\n                Notiflix.Notify.failure('Sorry, nothing was found') \n            }\n        }\n        getMoviesCast()\n    }, [movieId])\n\n    if (!cast) {\n        return;\n    }\n    return (\n        <CastContainer>\n            {isLoading && cast.length > 0 && (<CastList>\n                {cast.map(({ id, original_name, profile_path }) => (\n                <Item key={id}>\n                <Img src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n                  : 'https://th.bing.com/th/id/R.610f0113ff6b61d1d12fbc518546af7d?rik=X2X%2bSrzJxS3u%2fA&riu=http%3a%2f%2fupload.wikimedia.org%2fwikipedia%2fcommons%2fthumb%2fa%2fac%2fNo_image_available.svg%2f300px-No_image_available.svg.png&ehk=YbfvNr%2f5LeYCbhEYG3U7VrYvHaQztgu7VvV8D3utlOI%3d&risl=&pid=ImgRaw&r=0'\n              }\n              alt={original_name}\n            />\n                        <Name>{original_name}</Name>\n                        </Item>\n                ))}\n            </CastList>)}\n            {isLoading && <Loader />}\n        </CastContainer>\n    )\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07f8816ebdb8fd109b409236cc379840';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nexport const getCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `https://image.tmdb.org/t/p/w300/${posterPath}`;\n  return 'https://th.bing.com/th/id/R.d455faed57de093e87bf5e8d443a939d?rik=mcfV46ZrM7B%2b1w&riu=http%3a%2f%2fthemaryastorcollection.com%2fwp-content%2fgallery-bank%2falbum-thumbs%2fo_1a7dsr5bf1hr34nf1csc1eeb124va.jpg&ehk=zJ6vOJ%2fVm98M8P8VHvK9MVr5JhMaIybLNhey7wmTd2c%3d&risl=&pid=ImgRaw&r=0';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n"],"names":["CastContainer","styled","CastList","Item","Img","Name","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getMoviesCast","getCredits","response","Notiflix","length","map","id","original_name","profile_path","src","alt","Loader","axios","API_KEY","searchMovies","query","page","data","results","getTrending","getDetails","getReviews","getPosterFilm","posterPath","getGenres","genres","genre","name","join"],"sourceRoot":""}